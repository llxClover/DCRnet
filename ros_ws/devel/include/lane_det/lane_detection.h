// Generated by gencpp from file lane_det/lane_detection.msg
// DO NOT EDIT!


#ifndef LANE_DET_MESSAGE_LANE_DETECTION_H
#define LANE_DET_MESSAGE_LANE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace lane_det
{
template <class ContainerAllocator>
struct lane_detection_
{
  typedef lane_detection_<ContainerAllocator> Type;

  lane_detection_()
    : left_1()
    , left_0()
    , right_0()
    , right_1()
    , coeff_left_1()
    , coeff_left_0()
    , coeff_right_0()
    , coeff_right_1()  {
    }
  lane_detection_(const ContainerAllocator& _alloc)
    : left_1(_alloc)
    , left_0(_alloc)
    , right_0(_alloc)
    , right_1(_alloc)
    , coeff_left_1(_alloc)
    , coeff_left_0(_alloc)
    , coeff_right_0(_alloc)
    , coeff_right_1(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _left_1_type;
  _left_1_type left_1;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _left_0_type;
  _left_0_type left_0;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _right_0_type;
  _right_0_type right_0;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _right_1_type;
  _right_1_type right_1;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeff_left_1_type;
  _coeff_left_1_type coeff_left_1;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeff_left_0_type;
  _coeff_left_0_type coeff_left_0;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeff_right_0_type;
  _coeff_right_0_type coeff_right_0;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeff_right_1_type;
  _coeff_right_1_type coeff_right_1;





  typedef boost::shared_ptr< ::lane_det::lane_detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane_det::lane_detection_<ContainerAllocator> const> ConstPtr;

}; // struct lane_detection_

typedef ::lane_det::lane_detection_<std::allocator<void> > lane_detection;

typedef boost::shared_ptr< ::lane_det::lane_detection > lane_detectionPtr;
typedef boost::shared_ptr< ::lane_det::lane_detection const> lane_detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane_det::lane_detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane_det::lane_detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lane_det::lane_detection_<ContainerAllocator1> & lhs, const ::lane_det::lane_detection_<ContainerAllocator2> & rhs)
{
  return lhs.left_1 == rhs.left_1 &&
    lhs.left_0 == rhs.left_0 &&
    lhs.right_0 == rhs.right_0 &&
    lhs.right_1 == rhs.right_1 &&
    lhs.coeff_left_1 == rhs.coeff_left_1 &&
    lhs.coeff_left_0 == rhs.coeff_left_0 &&
    lhs.coeff_right_0 == rhs.coeff_right_0 &&
    lhs.coeff_right_1 == rhs.coeff_right_1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lane_det::lane_detection_<ContainerAllocator1> & lhs, const ::lane_det::lane_detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lane_det

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lane_det::lane_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_det::lane_detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_det::lane_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_det::lane_detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_det::lane_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_det::lane_detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane_det::lane_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a8ccbd1be031a9ebcd2bcf06c6e28fd";
  }

  static const char* value(const ::lane_det::lane_detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a8ccbd1be031a9eULL;
  static const uint64_t static_value2 = 0xbcd2bcf06c6e28fdULL;
};

template<class ContainerAllocator>
struct DataType< ::lane_det::lane_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_det/lane_detection";
  }

  static const char* value(const ::lane_det::lane_detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane_det::lane_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] left_1\n"
"geometry_msgs/Point[] left_0\n"
"geometry_msgs/Point[] right_0\n"
"geometry_msgs/Point[] right_1\n"
"float32[] coeff_left_1\n"
"float32[] coeff_left_0\n"
"float32[] coeff_right_0\n"
"float32[] coeff_right_1\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::lane_det::lane_detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane_det::lane_detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_1);
      stream.next(m.left_0);
      stream.next(m.right_0);
      stream.next(m.right_1);
      stream.next(m.coeff_left_1);
      stream.next(m.coeff_left_0);
      stream.next(m.coeff_right_0);
      stream.next(m.coeff_right_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane_det::lane_detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane_det::lane_detection_<ContainerAllocator>& v)
  {
    s << indent << "left_1[]" << std::endl;
    for (size_t i = 0; i < v.left_1.size(); ++i)
    {
      s << indent << "  left_1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_1[i]);
    }
    s << indent << "left_0[]" << std::endl;
    for (size_t i = 0; i < v.left_0.size(); ++i)
    {
      s << indent << "  left_0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_0[i]);
    }
    s << indent << "right_0[]" << std::endl;
    for (size_t i = 0; i < v.right_0.size(); ++i)
    {
      s << indent << "  right_0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_0[i]);
    }
    s << indent << "right_1[]" << std::endl;
    for (size_t i = 0; i < v.right_1.size(); ++i)
    {
      s << indent << "  right_1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_1[i]);
    }
    s << indent << "coeff_left_1[]" << std::endl;
    for (size_t i = 0; i < v.coeff_left_1.size(); ++i)
    {
      s << indent << "  coeff_left_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeff_left_1[i]);
    }
    s << indent << "coeff_left_0[]" << std::endl;
    for (size_t i = 0; i < v.coeff_left_0.size(); ++i)
    {
      s << indent << "  coeff_left_0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeff_left_0[i]);
    }
    s << indent << "coeff_right_0[]" << std::endl;
    for (size_t i = 0; i < v.coeff_right_0.size(); ++i)
    {
      s << indent << "  coeff_right_0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeff_right_0[i]);
    }
    s << indent << "coeff_right_1[]" << std::endl;
    for (size_t i = 0; i < v.coeff_right_1.size(); ++i)
    {
      s << indent << "  coeff_right_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeff_right_1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_DET_MESSAGE_LANE_DETECTION_H
