// Generated by gencpp from file lane_det/Localization.msg
// DO NOT EDIT!


#ifndef LANE_DET_MESSAGE_LOCALIZATION_H
#define LANE_DET_MESSAGE_LOCALIZATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace lane_det
{
template <class ContainerAllocator>
struct Localization_
{
  typedef Localization_<ContainerAllocator> Type;

  Localization_()
    : header()
    , position()
    , orientation()
    , linear()
    , linear_acceleration()
    , angular_velocity()
    , heading(0.0)  {
    }
  Localization_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , orientation(_alloc)
    , linear(_alloc)
    , linear_acceleration(_alloc)
    , angular_velocity(_alloc)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_type;
  _linear_type linear;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef float _heading_type;
  _heading_type heading;





  typedef boost::shared_ptr< ::lane_det::Localization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane_det::Localization_<ContainerAllocator> const> ConstPtr;

}; // struct Localization_

typedef ::lane_det::Localization_<std::allocator<void> > Localization;

typedef boost::shared_ptr< ::lane_det::Localization > LocalizationPtr;
typedef boost::shared_ptr< ::lane_det::Localization const> LocalizationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane_det::Localization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane_det::Localization_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lane_det::Localization_<ContainerAllocator1> & lhs, const ::lane_det::Localization_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.linear == rhs.linear &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lane_det::Localization_<ContainerAllocator1> & lhs, const ::lane_det::Localization_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lane_det

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lane_det::Localization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_det::Localization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_det::Localization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_det::Localization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_det::Localization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_det::Localization_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane_det::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0395158a67e1f39f1193d4c787ecc2a3";
  }

  static const char* value(const ::lane_det::Localization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0395158a67e1f39fULL;
  static const uint64_t static_value2 = 0x1193d4c787ecc2a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lane_det::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_det/Localization";
  }

  static const char* value(const ::lane_det::Localization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane_det::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Quaternion orientation\n"
"geometry_msgs/Vector3 linear\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float32 heading\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::lane_det::Localization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane_det::Localization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.linear);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Localization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane_det::Localization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane_det::Localization_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "linear: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_DET_MESSAGE_LOCALIZATION_H
